#include<iostream>
#include"rendclString.h"
using namespace std;

string rendString = {
    "void alphaColor(__global unsigned int* screen, int x, int y, int xSize, unsigned int Color) {\n"
    "    unsigned int newColor = screen[x+(y*xSize)];\n"
    "    unsigned int a = (Color & 0xff000000) >> 24;\n"
    "    unsigned int r = (Color & 0x00ff0000) >> 16;\n"
    "    unsigned int g = (Color & 0x0000ff00) >> 8;\n"
    "    unsigned int b = (Color & 0x000000ff);\n"
    "    unsigned int oldr = (newColor & 0x00ff0000) >> 16;\n"
    "    unsigned int oldg = (newColor & 0x0000ff00) >> 8;\n"
    "    unsigned int oldb = (newColor & 0x000000ff);\n"
    "    screen[x+(y*xSize)] = (((oldr*a/0xff)+(r*(0xff-a)/0xff)) << 16)+(((oldg*a/0xff)+(g*(0xff-a)/0xff)) << 8)+((oldb*a/0xff)+(b*(0xff-a)/0xff));\n"
    "}\n"
    "void alphaColorInd(__global unsigned int* screen, int ind, int xSize, unsigned int Color) {\n"
    "    unsigned int newColor = screen[ind];\n"
    "    unsigned int a = (Color & 0xff000000) >> 24;\n"
    "    unsigned int r = (Color & 0x00ff0000) >> 16;\n"
    "    unsigned int g = (Color & 0x0000ff00) >> 8;\n"
    "    unsigned int b = (Color & 0x000000ff);\n"
    "    unsigned int oldr = (newColor & 0x00ff0000) >> 16;\n"
    "    unsigned int oldg = (newColor & 0x0000ff00) >> 8;\n"
    "    unsigned int oldb = (newColor & 0x000000ff);\n"
    "    screen[ind] = (((oldr*a/0xff)+(r*(0xff-a)/0xff)) << 16)+(((oldg*a/0xff)+(g*(0xff-a)/0xff)) << 8)+((oldb*a/0xff)+(b*(0xff-a)/0xff));\n"
    "}\n"
    "\n"
    "__kernel void ImageCopy(__global const unsigned int* toCopy, __global unsigned int* toPaste, int xPos, int yPos, int xSize, int ySize, int pasteX, int pasteY, double scale) {\n"
    "    int currX = get_global_id(0);\n"
    "    int currY = get_global_id(1);\n"
    "    if (currX >= xSize*scale || currY >= ySize*scale) return;"
    "\n"
    "    if (currX+xPos < 0 || currX+xPos >= pasteX || currY+yPos < 0 || currY+yPos >= pasteY) {\n"
    "        return;\n"
    "    }\n"
    "    int groupX = (int)(currX/scale);"
    "    int groupY = (int)(currY/scale);"
    "    unsigned int ColorIn = toCopy[groupX+(groupY*xSize)];\n"
    "    if ((ColorIn & 0xff000000) == 0x00000000) {\n"
    "        toPaste[(currX+xPos)+((currY+yPos)*pasteX)] = ColorIn;\n"
    "        return;\n"
    "    }\n"
    "    alphaColor(toPaste,currX+xPos,currY+yPos,xSize,ColorIn);\n"
    "}\n"
    "\n"
    "__kernel void ImageCopyHue(__global const unsigned int* toCopy, __global unsigned int* toPaste, int xPos, int yPos, int xSize, int ySize, int pasteX, int pasteY, double scale, unsigned int Color) {\n"
    "    int currX = get_global_id(0);\n"
    "    int currY = get_global_id(1);\n"
    "    if (currX >= xSize*scale || currY >= ySize*scale) return;"
    "\n"
    "    if (currX+xPos < 0 || currX+xPos >= pasteX || currY+yPos < 0 || currY+yPos >= pasteY) {\n"
    "        return;\n"
    "    }\n"
    "    int groupX = (int)(currX/scale);"
    "    int groupY = (int)(currY/scale);"
    "    unsigned int ColorIn = Color&toCopy[groupX+(groupY*xSize)];\n"
    "    ColorIn &= 0x00ffffff;\n"
    "    ColorIn |= (Color|toCopy[groupX+(groupY*xSize)])&0xff000000;\n"
    "    if ((ColorIn & 0xff000000) == 0x00000000) {\n"
    "        toPaste[(currX+xPos)+((currY+yPos)*pasteX)] = ColorIn;\n"
    "        return;\n"
    "    }\n"
    "    alphaColor(toPaste,currX+xPos,currY+yPos,xSize,ColorIn);\n"
    "}\n"
    "\n"
    "__kernel void ClearScreen(__global unsigned int* screen, int xSize, int ySize, unsigned int Color) {\n"
    "    int id = get_global_id(0)+(get_global_id(1)*xSize);\n"
    "    if (id >= xSize*ySize) {\n"
    "        return;\n"
    "    }\n"
    "    if ((Color & 0xff000000) == 0x00000000) {\n"
    "        screen[id] = Color;\n"
    "        return;\n"
    "    }\n"
    "    alphaColorInd(screen,id,xSize,Color);\n"
    "}\n"
    "\n"
    "__kernel void DrawLine(__global unsigned int* screen, int xSize, int ySize, int x1, int y1, int x2, int y2, unsigned int Color) {\n"
    "    int id = get_global_id(0);\n"
    "    double slope = (1.0*y2-y1)/(x2-x1);\n"
    "    if (x2 < x1) {\n"
    "        id *= -1;\n"
    "    }\n"
    "\n"
    "    if (x1+id < 0 || x1+id >= xSize || y1+(id*slope) < 0 || y1+(id*slope) > ySize) {\n"
    "        return;\n"
    "    }\n"
    "    if ((Color & 0xff000000) == 0x00000000) {\n"
    "        screen[((y1+(int)(id*slope+0.5))*xSize+x1+id)] = Color;\n"
    "        return;\n"
    "    }\n"
    "    alphaColor(screen,x1+id,y1+(int)(id*slope+0.5),xSize,Color);\n"
    "}\n"
    "\n"
    "__kernel void DrawLineInv(__global unsigned int* screen, int xSize, int ySize, int x1, int y1, int x2, int y2, unsigned int Color) {\n"
    "    int id = get_global_id(0);\n"
    "    double slope = (1.0*x2-x1)/(y2-y1);\n"
    "    if (y2 < y1) {\n"
    "        id *= -1;\n"
    "    }\n"
    "\n"
    "    if (y1+id < 0 || y1+id >= ySize || x1+(id*slope) < 0 || x1+(id*slope) > xSize) {\n"
    "        return;\n"
    "    }\n"
    "    if ((Color & 0xff000000) == 0x00000000) {\n"
    "        screen[(((y1+id)*xSize)+x1+(int)(id*slope))] = Color;\n"
    "        return;\n"
    "    }\n"
    "    alphaColor(screen,x1+(int)(id*slope+0.5),y1+id,xSize,Color);\n"
    "}\n"
    "\n"
    "__kernel void ScaleUpTo(__global unsigned int* screenSmol, __global unsigned int* screen, int xSize, int ySize, int newXS, int newYS, int scale) {\n"
    "    int id = get_global_id(0)+(get_global_id(1)*newXS);\n"
    "    int smolID = id/scale;\n"
    "    screen[id] = screenSmol[smolID];\n"
    "}\n"
    "\n"
    "__kernel void FillTri(__global unsigned int* screen, int xSize, int ySize, int x1, int y1, int x2, int y2, int x3, int y3, unsigned int Color, int safeOutline) {\n"
    "    int x = get_global_id(0) + (x1<x2?(x1<x3?x1:x3):(x2<x3?x2:x3));\n"
    "    int y = get_global_id(1) + (y1<y2?(y1<y3?y1:y3):(y2<y3?y2:y3));\n"
    "    if (x >= xSize || x < 0 || y >= ySize || y < 0) {\n"
    "        return;\n"
    "    }\n"
    "    int v1X = x2-x1;\n"
    "    int v1Y = y2-y1;\n"
    "    int v2X = x3-x1;\n"
    "    int v2Y = y3-y1;\n"
    "    int v3X = x3-x2;\n"
    "    int v3Y = y3-y2;\n"
    "    int vX = x-x1;\n"
    "    int vY = y-y1;\n"
    "    int vX2 = x-x2;\n"
    "    int vY2 = y-y2;\n"
    "    int aActual = (v1X*v2Y-v1Y*v2X)/2;\n"
    "    int a = (vX*v1Y-vY*v1X)/2;\n"
    "    int b = (vX*v2Y-vY*v2X)/2;\n"
    "    int c = (v3X*vY2-vX2*v3Y)/2;\n"
    "    aActual *= aActual<0 ? -1 : 1;\n"
    "    a *= a<0 ? -1 : 1;\n"
    "    b *= b<0 ? -1 : 1;\n"
    "    c *= c<0 ? -1 : 1;\n"
    "    if (a+b+c > aActual || (!safeOutline && (a == 0 || b == 0 || c == 0))) {\n"
    "        return;\n"
    "    }\n"
    "    alphaColor(screen,x,y,xSize,Color);\n"
    "}\n"
    "\n"
    "struct vec3CLI {\n"
    "    int x;\n"
    "    int y;\n"
    "    int z;\n"
    "};\n"
    "typedef struct vec3CLI vec3CLI;\n"
    "struct vec3CL {\n"
    "    double x;\n"
    "    double y;\n"
    "    double z;\n"
    "};\n"
    "typedef struct vec3CL vec3CL;\n"
    "\n"
    "double dot(vec3CL self, vec3CL other) {\n"
    "    double sum = self.x*other.x;\n"
    "    sum += self.y*other.y;\n"
    "    sum += self.z*other.z;\n"
    "    return sum;\n"
    "}\n"
    "vec3CL cross(vec3CL self, vec3CL other) {\n"
    "    vec3CL crossed;\n"
    "    crossed.x = self.y*other.z - self.z*other.y;\n"
    "    crossed.y = self.z*other.x - self.x*other.z;\n"
    "    crossed.z = self.x*other.y - self.y*other.x;\n"
    "    return crossed;\n"
    "}\n"
    "vec3CL vadd(vec3CL self, vec3CL other) {\n"
    "    self.x += other.x;\n"
    "    self.y += other.y;\n"
    "    self.z += other.z;\n"
    "    return self;\n"
    "}\n"
    "vec3CL vmult(vec3CL self, double scale) {\n"
    "    self.x *= scale;\n"
    "    self.y *= scale;\n"
    "    self.z *= scale;\n"
    "    return self;\n"
    "}\n"
    "double vMag(vec3CL self) {\n"
    "    return sqrt(dot(self,self));\n"
    "}\n"
    "\n"
    "__kernel void TextureTri(__global unsigned int* screen, __global unsigned int* depth, __global unsigned int* texture, __global unsigned int* light, int xSize, int ySize, vec3CL p1, vec3CL p2, vec3CL p3, vec3CLI SS1, vec3CLI SS2, vec3CLI SS3, vec3CLI TS1, vec3CLI TS2, vec3CLI TS3, vec3CLI textSize) {\n"
    "    int x = get_global_id(0) + (SS1.x<SS2.x?(SS1.x<SS3.x?SS1.x:SS3.x):(SS2.x<SS3.x?SS2.x:SS3.x));\n"
    "    int y = get_global_id(1) + (SS1.y<SS2.y?(SS1.y<SS3.y?SS1.y:SS3.y):(SS2.y<SS3.y?SS2.y:SS3.y));\n"
    "    if (x >= xSize || x < 0 || y >= ySize || y < 0) {\n"
    "        return;\n"
    "    }\n"
    "    int v1X = SS2.x-SS1.x;\n"
    "    int v1Y = SS2.y-SS1.y;\n"
    "    int v2X = SS3.x-SS1.x;\n"
    "    int v2Y = SS3.y-SS1.y;\n"
    "    int v3X = SS3.x-SS2.x;\n"
    "    int v3Y = SS3.y-SS2.y;\n"
    "    int vX = x-SS1.x;\n"
    "    int vY = y-SS1.y;\n"
    "    int vX2 = x-SS2.x;\n"
    "    int vY2 = y-SS2.y;\n"
    "    int aActual = (v1X*v2Y-v1Y*v2X)/2;\n"
    "    int a = (vX*v1Y-vY*v1X)/2;\n"
    "    int b = (vX*v2Y-vY*v2X)/2;\n"
    "    int c = (v3X*vY2-vX2*v3Y)/2;\n"
    "    aActual *= aActual<0 ? -1 : 1;\n"
    "    a *= a<0 ? -1 : 1;\n"
    "    b *= b<0 ? -1 : 1;\n"
    "    c *= c<0 ? -1 : 1;\n"
    "    if (a+b+c > aActual) {\n"
    "        return;\n"
    "    }\n"
    "    vec3CL rayVec;\n"
    "    rayVec.x = -0.001;\n"
    "    rayVec.z = 0.001-(0.002*((double)y)/ySize);//FOV = 90 and n = 0.001\n"
    "    rayVec.y = (0.002*xSize/ySize)*((double)x)/xSize - 0.001;\n"
    "    vec3CL triNorm = cross(vadd(p2,vmult(p1,-1)),vadd(p3,vmult(p2,-1)));\n"
    "    double s2 = dot(p1,triNorm);\n"
    "    double s1 = dot(rayVec,triNorm);\n"
    "    vec3CL intersect = vmult(rayVec,s2/s1);\n"
    "    double dist = vMag(intersect)*0xffffffff/1000;\n"
    "    if (dist > depth[x+y*xSize] && depth[x+y*xSize] != 0) {\n"//SO BUGGY MAKE A BETTER WAY TO FIND THE INTERSECTING PART ALSO CHANGE PROJECTION MATRIC BC WTF IS THAT
    "        return;\n"
    "    }\n"
    "    depth[x+y*xSize] = dist;\n"
    "    screen[x+y*xSize] = 0x00ffffff;\n"//make actual texture
    "}\n"
};

string getRendCL() {
    return rendString;
}
